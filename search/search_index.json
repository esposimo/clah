{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Clah \u2013 Cloud at Home","text":"<p>Welcome to the official documentation of Clah (Cloud at Home), a project designed to create and manage a personal, reliable, and secure local cloud, entirely based on open-source technologies.</p>"},{"location":"#purpose","title":"\ud83c\udfaf Purpose","text":"<p>Clah provides a minimal but solid infrastructure layer to run your own applications and services, replicating the essential features of major cloud providers (AWS, Azure, GCP) but in a self-hosted, local environment.</p> <p>Everything runs with Docker and can be deployed on a single node (NUC, mini PC, or home server).</p>"},{"location":"#core-components","title":"\ud83e\uddf1 Core Components","text":"<p>Clah is a modular, containerized infrastructure offering:</p> <ul> <li>\ud83e\uddd1\u200d\ud83d\udcbb Centralized authentication with Autentik+OpenLDAP, supporting SSO, SAML, OAuth2, and MFA (like Microsoft Entra ID)</li> <li>\ud83e\uddfe Central service configuration for managing app settings with Hashicorp Consul</li> <li>\ud83d\udcbe Local object storage with [MinIO], S3-compatible (like Amazon S3 or Azure Blob)</li> <li>\ud83d\udddd\ufe0f Local key vault using HashiCorp Vault, for secure storage of secrets and encryption keys (like Azure Key Vault) managed with SOPS</li> <li>\ud83d\udce1 Event broker (Kafka, MQTT, etc.) for asynchronous service communication</li> <li>\ud83d\udcca Monitoring dashboards and centralized logs with [Grafana] + [Elastic Stack] (like Azure Monitor or CloudWatch)</li> <li>\ud83d\udd01 Automated backups with [Duplicati]</li> <li>\ud83c\udf0d Multiple public endpoints managed with [Nginx Proxy Manager], including automatic Let's Encrypt certificate generation for exposing services to the internet</li> <li>\ud83d\udd14 Integrated notification system, based on ntfy</li> <li>\ud83d\ude80 Easy application deployment using Docker containers</li> </ul>"},{"location":"#infrastructure-as-code-iac","title":"\u2699\ufe0f Infrastructure as Code (IaC)","text":"<p>The entire infrastructure is managed using Terraform](https://developer.hashicorp.com/terraform), following an Infrastructure as Code (IaC) approach that allows:</p> <ul> <li>Declarative definition of your entire stack</li> <li>Full version control of infrastructure changes</li> <li>Automated environment provisioning, updates, and teardown</li> </ul> <p>Provisioning, configuration, and daily management are handled via the <code>clah</code> command-line tool, which orchestrates all services and infrastructure layers.</p> <p>A future release will include an HTTP API layer as an alternative to the CLI tool, enabling programmatic control and integration with graphical interfaces or external systems.</p>"},{"location":"#compare-to-public-cloud-services","title":"\ud83c\udf10 Compare to public cloud services","text":"Clah Service Public Cloud Equivalent Functionality Authentik + OpenLDAP Azure Entra / AWS IAM Identity management, SSO, OAuth2, SAML, MFA Vault (KV + Transit) Azure Key Vault Secret and key storage SOPS AWS Secrets Manager Secure configuration file encryption MinIO Amazon S3 / Azure Blob S3-compatible object storage Grafana + Elastic Stack CloudWatch / Azure Monitor Centralized monitoring and logging Duplicati Azure Backup / AWS Backup Scheduled backup and restore Nginx Proxy Manager Azure App Gateway HTTPS routing with auto certificate management"},{"location":"#who-is-clah-for","title":"\ud83e\uddea Who is Clah for?","text":"<ul> <li>Learners who want to understand infrastructure by building it</li> <li>Developers who need a local cloud-like testbed</li> <li>Tinkerers who want full control over their digital services</li> <li>Users seeking a modular, reproducible, and fully self-hosted environment</li> </ul>"},{"location":"#get-started","title":"\ud83d\ude80 Get Started","text":"<p>Check out the Quick Start Guide to launch your personal home cloud with Clah. Every module is documented with practical examples, ready-to-use scripts, and setup tips.</p> <p>Clah is a lightweight, real alternative to complex cloud ecosystems\u2014built for self-hosting, digital autonomy, and advanced experimentation.</p>"},{"location":"about/","title":"About me","text":"main.c<pre><code>/* no comment */\n</code></pre>"},{"location":"cli/clah-command/","title":"clah usage","text":""},{"location":"cli/clah-config/","title":"clah config","text":""},{"location":"cli/clah-destroy/","title":"clah destroy","text":""},{"location":"cli/clah-init/","title":"clah init","text":""},{"location":"cli/clah-sc/","title":"clah sc usage","text":""},{"location":"cli/clah-sops/","title":"clah sops","text":""},{"location":"cli/clah-tf/","title":"clah tf","text":""},{"location":"cli/clah-users/","title":"clah users","text":""},{"location":"cli/clah-vault/","title":"clah vault","text":""},{"location":"cli/generate-password/","title":"generate password","text":""},{"location":"cli/get-docker-host/","title":"get docker host","text":""},{"location":"install/getting-started/","title":"Ready to Use","text":""},{"location":"install/getting-started/#clone-the-repository","title":"Clone the Repository","text":"<p>Clone the GitHub repository into your preferred project directory:</p> <p>bash<pre><code>git clone https://github.com/esposimo/clah.git &lt;project-dir&gt;\n</code></pre> Replace  with the absolute path where you want to store the project files."},{"location":"install/getting-started/#configure-your-shell-environment","title":"Configure Your Shell Environment","text":"<p>Modify your <code>~/.bashrc</code> (or equivalent shell config file, e.g., <code>~/.zshrc</code>) to set the required environment variables:</p> <p>bash<pre><code># add environment variable\nexport CLAH_HOME=\"&lt;project-dir&gt;\"\nexport CLAH_BIN=\"${CLAH_HOME}/bin\"\nexport CLAH_SC_PORT=\"15080\"\nexport CLAH_DATA=\"&lt;project-data&gt;\"\n\nif [[ -f \"${CLAH_BIN}/load_env.sh\" ]]; then\n    source \"${CLAH_BIN}/load_env.sh\"\nfi\n</code></pre> Replace  with the path where you cloned the repository. This configuration will allow you to use the clah command from any terminal session. <p>Info</p> <p>You can change the <code>CLAH_SC_HOST_PORT</code> variable to initialize the Service Config on a port other than <code>15080</code>. This won't affect any of the CLAH Terraform projects. Since CLAH runs only with Docker in single-node mode, the Terraform projects will always use <code>127.0.0.1:CLAH_SC_HOST_PORT</code> as the endpoint.</p>"},{"location":"install/getting-started/#reload-your-shell-environment","title":"Reload Your Shell Environment","text":"<p>After modifying your shell configuration file, apply the changes by either:</p> <ul> <li>restarting your shell session (e.g., open a new terminal), or  </li> <li>running the following command:</li> </ul> <p>bash<pre><code>source ~/.bashrc\n</code></pre> Once reloaded, the clah command should be available in your terminal.</p>"},{"location":"install/getting-started/#quick-start","title":"Quick Start","text":"<p>You can initialize the entire CLAH infrastructure with a single command:</p> <p><pre><code>clah init all\n</code></pre> This command will automatically execute all the required steps in the correct order, using the default configuration files.</p> <p>Tip</p> <p>The <code>clah init all</code> command is intended for users who want a ready-to-use setup with default values. If you prefer to customize the configuration or understand how CLAH works internally, follow each section in this documentation manually.</p> <p>Step by step documentation to have full control and understanding each component in the setup process</p> <ul> <li>Service Config</li> <li>Network</li> <li>Vault</li> </ul>"},{"location":"install/network/","title":"Infrastructure Network","text":"<p>The first Terraform-based step in the CLAH initialization process is the creation of the infrastructure network. This network will exclusively host core CLAH services such as the API Gateway, Authentication Service, Key Vault, and others.</p>"},{"location":"install/network/#create-the-infrastructure-network","title":"Create the Infrastructure Network","text":"<p>To create the network, run the following script:</p> <p>bash<pre><code>$ clah init network\n</code></pre> This script will use predefined configuration values from the file variables.tfvars in <code>$CLAH_HOME/infrastructure/network/config</code></p> <p>The default values are:</p> $CLAH_HOME/infrastructure/network/config/variables.tfvars<pre><code>network-infra-name    = \"clah-infrastructure-network\"\nnetwork-infra-gateway = \"10.190.10.1\"\nnetwork-infra-subnet  = \"10.190.10.1/24\"\n</code></pre> <p>Once the script is executed, a new infrastructure network will be created using these values.</p>"},{"location":"install/network/#customize-network-configuration","title":"Customize Network Configuration","text":"<p>The <code>variables.tfvars</code> file defines the core parameters for the infrastructure network. You can modify these values before running the <code>apply.sh</code> script if you want to change the network configuration.</p> <p>Here\u2019s a breakdown of the variables:</p> <ul> <li> <p><code>network-infra-name</code>:   The name of the Docker network that will be created for CLAH infrastructure services.</p> </li> <li> <p><code>network-infra-gateway</code>:   The gateway IP address for the network. This is typically the first IP in the subnet.</p> </li> <li> <p><code>network-infra-subnet</code>:   The CIDR block representing the full address range of the infrastructure network.</p> </li> </ul> <p>To apply your own custom network configuration, simply edit the file <code>$CLAH_HOME/infrastructure/network/config/variables.tfvars</code> before running the apply script.</p>"},{"location":"install/network/#values-stored-in-service-config","title":"Values Stored in Service Config","text":"<p>Once the network is created, the following values will be automatically stored in the Service Config (Consul) under these paths:</p> <ul> <li><code>infrastructure/network/name</code> </li> <li><code>infrastructure/network/subnet</code> </li> <li><code>infrastructure/network/gateway</code> </li> <li><code>infrastructure/network/docker-host-ip</code> </li> </ul> <p>These paths are essential for other services to retrieve the infrastructure network configuration.</p> <p>Info</p> <p>The value of <code>docker-host-ip</code> is determined by the script <code>$CLAH_HOME/infrastructure/network/get_docker_ip.sh</code>. You may edit this script if you want to manually define the IP address of the Docker host instead of detecting it automatically.</p>"},{"location":"install/network/#proceed-to-vault-setup","title":"Proceed to Vault Setup","text":"<p>With the infrastructure network successfully created and registered in the Service Config, you're now ready to move on to the next critical step: setting up the Vault service.</p> <p>Follow the Vault documentation page to initialize and configure it as the secure key and secret store for all CLAH services.</p>"},{"location":"install/requirements/","title":"System Requirements","text":"<p>The CLAH environment is designed to run on a Debian-based system (e.g., Debian, Ubuntu). Before proceeding, ensure your system meets the following requirements.</p>"},{"location":"install/requirements/#hardware-requirements","title":"Hardware Requirements","text":"<p>The CLAH platform has been tested and verified on the following hardware configuration:</p> Component Specification Device Mini PC (e.g., NiPoGi N95 Mini PC) CPU Intel N95 (4 cores, 4 threads, up to 3.4 GHz) RAM 16 GB DDR4 Storage 512 GB M.2 SATA SSD Operating System Debian 12.1 (Bookworm) <p>This configuration provides enough resources to run the full CLAH infrastructure stack, including all services such as the API gateway, Vault, Service Config, and monitoring tools.</p> <p>Note</p> <p>While the system can run on lower specs, using hardware similar to this configuration is strongly recommended for performance and stability.</p>"},{"location":"install/requirements/#required-tools","title":"Required Tools","text":"<p>The following tools and packages must be installed:</p> <ul> <li>Docker</li> <li>Terraform</li> <li>SOPS</li> <li>System Utilities (git, curl, jq, pwgen)</li> </ul>"},{"location":"install/requirements/#installation-guide","title":"Installation Guide","text":""},{"location":"install/requirements/#install-system-utilities","title":"Install System Utilities","text":"<p>Clah needs the following system utilities for essential operations:</p> <ul> <li>git \u2013 used to clone the CLAH repository</li> <li>curl \u2013 required for making HTTP requests to the service configuration endpoint.  </li> <li>jq \u2013 used to parse and manipulate JSON data in shell scripts.</li> <li>pwgen \u2013 used to generate random and secure passwords when provisioning services.</li> </ul> bash<pre><code>sudo apt install git curl jq pwgen\n</code></pre>"},{"location":"install/requirements/#external-tools-installation","title":"External Tools Installation","text":"<p>Clah needs the following external tools that are not installed via <code>apt</code>. Please refer to their respective official documentation for installation instructions:</p> <ul> <li> <p>Docker https://docs.docker.com/get-docker/</p> </li> <li> <p>SOPS (Mozilla SOPS) https://github.com/getsops/sops#installation</p> </li> <li> <p>Terraform (by HashiCorp) https://developer.hashicorp.com/terraform/install</p> </li> </ul>"},{"location":"install/requirements/#recommended-settings-for-docker","title":"Recommended settings for docker","text":"<ul> <li>Limit container log size and rotation to prevent uncontrolled disk growth.     Refer to the Docker documentation on configuring the <code>json-file</code> logging driver.</li> </ul>"},{"location":"install/sc-install/","title":"Service Config","text":"<p>The first essential component to deploy in the CLAH infrastructure is the Consul container. This instance of Consul acts as a Service Config Registry, storing key infrastructure metadata that will be used by other services and deployment scripts.</p>"},{"location":"install/sc-install/#purpose","title":"Purpose","text":"<p>The Consul container provides a central registry to:</p> <ul> <li>Store information about service endpoints (e.g., Vault, API Gateway).</li> <li>Act as a simple key-value store accessible via HTTP API.</li> <li>Share infrastructure metadata with deployment scripts for your applications.</li> </ul> <p>Important: This container is not intended for production usage as-is. It runs with ACLs disabled, unencrypted traffic, and no authentication mechanisms. Never expose this service to the internet. It must remain inside a trusted, internal network (LAN).</p>"},{"location":"install/sc-install/#how-to-launch-it","title":"How to launch it","text":"<p>Run the following command:</p> bash<pre><code>$ clah init sc\n</code></pre> <p>This command will:</p> <ul> <li>Build and start a Consul Docker container.</li> <li>Expose it on port <code>CLAH_SC_HOST_PORT</code> of the host machine.</li> <li>Create a Docker volume for persistent data storage.</li> <li>Skip any security configuration to keep the setup simple for development.</li> </ul> <p>Once started, you can access the HTTP web console at:</p> bash<pre><code>$ http://&lt;docker-host&gt;:&lt;CLAH_SC_HOST_PORT&gt;\n</code></pre> <p>and HTTP API at: bash<pre><code>$ http://&lt;docker-host&gt;:&lt;CLAH_SC_HOST_PORT&gt;/v1/kv\n</code></pre></p>"},{"location":"install/sc-install/#configuration-variables","title":"Configuration Variables","text":"<p>The script supports several environment variables to customize the container configuration. If not set, default values will be used:</p> Variable Description Default Value <code>CLAH_SC_BASE_IMAGE</code> Docker image to use for Consul <code>hashicorp/consul:1.20</code> <code>CLAH_SC_CONTAINER_NAME</code> Name of the container <code>service-config-container</code> <code>CLAH_SC_CONTAINER_IMAGE</code> Name of the image to build <code>service-config-image</code> <code>CLAH_SC_VOLUME_NAME</code> Docker volume name for Consul data <code>service-config-volume</code> <code>CLAH_SC_HOST_PORT</code> Host port to access Consul <code>15080</code> <p>You can override these by exporting them in your shell before launching the script:</p> bash<pre><code>export CLAH_SC_HOST_PORT=15100\nexport CLAH_SC_CONTAINER_NAME=my-consul\nclah init sc\n</code></pre> <p>Warning</p> <p>If you want to use a different port for the service config, it's recommended to set the <code>CLAH_SC_HOST_PORT</code> variable in your <code>.bashrc</code>. Exporting it only in the current Bash session may lead to issues when opening new SSH sessions.</p>"},{"location":"install/sc-install/#security-considerations","title":"Security Considerations","text":"<p>The Consul instance started by <code>clah sc init</code> is intentionally configured without ACLs and uses unencrypted communication. This setup is only intended for local or LAN-restricted environments.</p> <p>Never expose this Consul service directly to the internet.</p> <p>This Consul instance is designed to act as a lightweight Service Config Registry, storing useful infrastructure metadata such as:</p> <ul> <li>Endpoints of core services (Vault, API Gateway, etc.)</li> <li>Runtime configuration for deploy scripts</li> </ul>"},{"location":"install/sc-install/#next-step-initialize-network","title":"Next Step: Initialize Network","text":"<p>With the Service Config (Consul) now running, the next step is to initialize Infrastructure Network. \u27a1\ufe0f Follow the guide at Infrastructure Network</p>"},{"location":"install/vault/","title":"Vault","text":""},{"location":"install/vault/#initialize-vault-service","title":"Initialize Vault Service","text":"<p>To initialize the Vault used by CLAH, simply run the script located at:</p> bash<pre><code>clah init vault\n</code></pre> <p>This script performs the full initialization of the Vault service using the default configuration provided in the variables.tfvars file. No manual steps are required.</p> <p>Once executed:</p> <ul> <li>A Consul container (used as the Vault's storage engine) will be started.</li> <li>The Vault container will be created and started, configured to communicate securely with Consul over an encrypted connection using self-signed certificates. A <code>vault.hcl</code> file is used to build vault container</li> <li>The Vault will be automatically initialized.</li> <li>Both the root key and the unseal key will be stored inside the Service Config.</li> <li>The Vault instance will be available at: <code>https://docker-host:28200</code> (replace <code>docker-host</code> with the IP or hostname of your Docker host machine)</li> </ul> <p>\u26a0\ufe0f Important: This Vault instance is meant to be internal only and must not be exposed to the Internet</p>"},{"location":"install/vault/#vault-configuration-overview","title":"Vault Configuration Overview","text":"<p>The Vault service in CLAH is based on HashiCorp Vault with Consul configured as the storage engine. The Consul instance used for Vault's storage is separate from the one utilized for the Service Config.</p> <p>Before running the initialization script, you can modify the default configuration by editing the <code>variables.tfvars</code> file found in <code>$CLAH_HOME/infrastructure/vault/config</code></p> <p>This file contains key variables that define the Vault and Consul setup. Here are the default values provided in the file:</p>"},{"location":"install/vault/#consul-storage-engine-settings","title":"Consul Storage Engine Settings","text":"storage engine variables<pre><code>storage-engine-image-name    = \"hashicorp/consul\"  \nstorage-engine-image-version = \"1.20\"  \nstorage-engine-volume        = \"vol-storage-engine-vault\"  \nstorage-engine-container     = \"clah-storage-engine-vault\"  \nstorage-engine-address-v4    = \"10.190.10.2\"  \nstorage-engine-ports         = [...] (list of ports and protocols)\n</code></pre>"},{"location":"install/vault/#vault-settings","title":"Vault Settings","text":"<p>vault service variables<pre><code>vault-image-name     = \"hashicorp/vault\"  \nvault-image-version  = \"1.19\"  \nvault-volume         = \"vol-vault\"  \nvault-container-name = \"clah-vault\"  \nvault-address-v4     = \"10.190.10.3\"  \nvault-ports          = [  \n    { container = 8200, host = 28200, protocol = \"tcp\" }  \n]  \n</code></pre> These settings control the container images, volumes, IP addresses, ports, and other key parameters of Vault and Consul.</p> <p>Note</p> <p>You can modify any of these values before proceeding with the Vault initialization to adapt the configuration to your environment.</p>"},{"location":"install/vault/#service-config-values","title":"Service Config values","text":"<p>Once the script has completed, the following values will be available in the Service Config:</p> <ul> <li><code>infrastructure/storage-engine/container-name</code></li> <li><code>infrastructure/storage-engine/build-image</code></li> <li><code>infrastructure/storage-engine/internal-ip</code></li> <li><code>infrastructure/storage-engine/internal-port</code></li> <li><code>infrastructure/storage-engine/internal-endpoint</code></li> <li><code>infrastructure/storage-engine/external-ip</code></li> <li><code>infrastructure/storage-engine/external-port</code></li> <li><code>infrastructure/storage-engine/external-endpoint</code></li> <li><code>infrastructure/vault/container-name</code></li> <li><code>infrastructure/vault/build-image</code></li> <li><code>infrastructure/vault/internal-ip</code></li> <li><code>infrastructure/vault/internal-port</code></li> <li><code>infrastructure/vault/internal-endpoint</code></li> <li><code>infrastructure/vault/external-ip</code></li> <li><code>infrastructure/vault/external-port</code></li> <li><code>infrastructure/vault/external-endpoint</code></li> <li><code>infrastructure/vault/root-key</code></li> <li><code>infrastructure/vault/unseal-key</code></li> </ul> <p>These paths represent the critical configuration values for both the Vault and Consul services, ensuring that they are properly set up in the Service Config for future access and use.</p> <p>Important: Make sure that the Vault and Consul services are never exposed to the internet. They should always be secured within your internal infrastructure.</p>"},{"location":"install/vault/#vault-configuration-details","title":"Vault Configuration Details","text":"<p>After initialization, Vault is set up with the following configuration:</p>"},{"location":"install/vault/#secrets-engine-transit","title":"Secrets Engine (Transit)","text":"<p>Vault uses a Transit secrets engine named <code>sops-kv</code>, which is configured to handle encryption and decryption operations. The key name used for infrastructure secrets is:</p> <ul> <li><code>sops-key-infrastructure</code></li> </ul> <p>This key will be utilized by CLAH\u2019s SOPS module to securely encrypt and decrypt secret files, ensuring that sensitive data is protected throughout your workflow.</p>"},{"location":"install/vault/#vault-configuration-file","title":"Vault Configuration File","text":"<p>The Vault container is initialized using the configuration file located at: <code>$CLAH_HOME/infrastructure/vault/config/vault.hcl</code></p> <p>This file contains the settings required for Vault to function properly within your infrastructure. You can customize the file before initialization if necessary, although the default settings should suffice for most users.</p> <p>Note</p> <p>You can modify the <code>vault.hcl</code> file to further customize Vault\u2019s behavior, such as adjusting storage backends, defining access policies, and more. Be cautious when modifying this file, as incorrect settings may prevent Vault from initializing properly.</p>"},{"location":"platforms/docker/","title":"Why docker","text":""},{"location":"platforms/sops/","title":"Why SOPS","text":""},{"location":"platforms/terraform/","title":"Why Terraform","text":""},{"location":"platforms/terraform/#introduction","title":"Introduction","text":"<p>The CLAH project (Cloud Local Application Hub) is designed to offer a robust and modular application stack tailored for self-hosted environments. One of its key design principles is the definition of infrastructure as application code (IaAC) \u2014 a step beyond traditional Infrastructure as Code (IaC). This paradigm treats not only compute and network layers as code, but also the configuration, dependencies, and logical composition of the services as part of the same automated definition.</p> <p>In this context, choosing the right platform to express and manage this infrastructure is critical. The CLAH stack is based on containers, service discovery, secrets management, monitoring, and custom logic orchestration \u2014 all requiring a high degree of automation, reusability, and reliability.</p> <p>After evaluating several tools and frameworks, we chose Terraform as the foundation for CLAH\u2019s IaAC implementation. This documentation outlines the rationale behind this decision and why Terraform stands out as the most effective choice for our architecture.</p>"},{"location":"platforms/terraform/#why-terraform_1","title":"Why Terraform?","text":"<p>Terraform was selected as the core platform for CLAH\u2019s Infrastructure as Application Code (IaAC) due to its unique combination of stability, flexibility, and extensibility. While many tools exist for provisioning infrastructure or managing configuration, Terraform provides a unified language and workflow to define and manage the full lifecycle of infrastructure resources \u2014 from bare metal and cloud services to container platforms and secrets managers.</p> <p>Key reasons behind this choice include:</p> <ul> <li>Consistency: Terraform enables reproducible environments through declarative configuration and state tracking.</li> <li>Ecosystem: The wide range of official and community providers allows integration with Docker, Consul, Vault, DNS servers, cloud APIs, and more \u2014 all from a single control plane.</li> <li>Modularity: Native support for modules encourages clean separation of concerns and reusability across environments.</li> <li>Visibility and Control: Terraform\u2019s plan-and-apply cycle makes every infrastructure change explicit and auditable.</li> <li>Cloud-Agnostic Logic: CLAH is designed to run on local hardware but could be ported to the cloud. Terraform supports both without changing the core logic.</li> </ul> <p>Terraform is not just a provisioning tool in CLAH \u2014 it is the infrastructure definition layer that bridges configuration, deployment, and service composition. The following sections break down the specific reasons why it outperforms other alternatives for this purpose.</p>"},{"location":"platforms/terraform/#maturity-and-ecosystem","title":"Maturity and Ecosystem","text":"<p>Terraform is a mature and battle-tested tool developed by HashiCorp and widely adopted across industries. Since its initial release in 2014, it has evolved into one of the most stable and actively maintained infrastructure automation tools available.</p>"},{"location":"platforms/terraform/#stability-and-community-support","title":"Stability and Community Support","text":"<p>Terraform\u2019s maturity is reflected in its:</p> <ul> <li>Long-term versioning and upgrade policies</li> <li>Extensive documentation and tutorials</li> <li>Backed support by HashiCorp and an active open-source community</li> </ul> <p>For a project like CLAH, which aims to be sustainable and maintainable over time, relying on a proven and well-documented platform is crucial.</p>"},{"location":"platforms/terraform/#provider-ecosystem","title":"Provider Ecosystem","text":"<p>A core strength of Terraform is its provider ecosystem, which supports a vast number of platforms and technologies, including:</p> <ul> <li>Docker: for container orchestration</li> <li>Vault: for secrets and identity management</li> <li>Consul: for service discovery</li> <li>Local and remote DNS: including BIND, CoreDNS, Cloudflare, etc.</li> <li>Filesystems and local exec: for executing configuration scripts</li> <li>Cloud services: should future migration or hybrid setups be required</li> </ul> <p>This extensibility allows CLAH to unify infrastructure provisioning across heterogeneous components using a single, declarative language.</p>"},{"location":"platforms/terraform/#module-registry","title":"Module Registry","text":"<p>Terraform also offers a centralized module registry and supports private registries, which helps in sharing and reusing modules \u2014 ideal for separating logical units such as logging, networking, security policies, and application stacks.</p> <p>In short, Terraform\u2019s maturity and rich ecosystem make it a stable foundation for building and evolving the CLAH platform.</p>"},{"location":"platforms/terraform/#declarative-approach","title":"Declarative Approach","text":"<p>Terraform uses a declarative configuration language (HCL), which allows the desired state of the infrastructure to be described in a concise and human-readable way. Rather than writing procedural instructions on how to reach that state, users define what the infrastructure should look like \u2014 and Terraform figures out how to make it happen.</p>"},{"location":"platforms/terraform/#benefits-of-declarative-iaac-in-clah","title":"Benefits of Declarative IaAC in CLAH","text":"<p>For the CLAH project, the declarative approach brings several advantages:</p> <ul> <li>Clarity and Maintainability: The code describes the final infrastructure state, making it easier to understand and review.</li> <li>Idempotence: Applying the same configuration multiple times yields the same result \u2014 critical for repeatable deployments.</li> <li>Safe Change Management: Terraform's <code>plan</code> phase clearly shows the delta between current and target state, preventing unexpected changes.</li> <li>Auditability: Version-controlled configuration files offer a full history of changes to infrastructure definitions.</li> <li>Diff Awareness: The plan engine detects even subtle differences (e.g., IP change, secret rotation) and surfaces them clearly.</li> </ul>"},{"location":"platforms/terraform/#application-to-service-composition","title":"Application to Service Composition","text":"<p>In CLAH, declarative syntax helps express how components relate to each other:</p> <ul> <li>Service dependencies (e.g., \u201cHome Assistant requires MQTT and Vault\u201d)</li> <li>Networking logic (e.g., \u201cExpose this stack only via reverse proxy\u201d)</li> <li>Resource constraints (e.g., \u201cUse a private Docker network with reserved IPs\u201d)</li> </ul> <p>This results in infrastructure that behaves like composable building blocks, defined once and deployed many times, across dev, staging, and production environments.</p> <p>Terraform's declarative model is essential for achieving predictable, repeatable, and explainable deployments in the CLAH architecture.</p>"},{"location":"platforms/terraform/#multi-provider-support","title":"Multi-Provider Support","text":"<p>One of Terraform\u2019s most powerful features is its ability to interact with multiple providers simultaneously, enabling orchestration across diverse systems and APIs. For the CLAH project \u2014 which integrates local containers, DNS, secrets, proxies, and monitoring \u2014 this flexibility is essential.</p>"},{"location":"platforms/terraform/#unified-control-plane","title":"Unified Control Plane","text":"<p>Terraform allows CLAH to manage different parts of the infrastructure using a single language and workflow, including:</p> <ul> <li>Docker provider: for container networks, volumes, images, and services.</li> <li>Vault provider: for secrets injection, PKI automation, and dynamic credentials.</li> <li>Local and external DNS providers: for configuring internal name resolution and dynamic record updates.</li> <li>Filesystem and exec providers: for triggering scripts and custom logic where needed.</li> <li>Consul provider: for registering and discovering services dynamically.</li> </ul> <p>All providers are configured independently but orchestrated together in a single execution plan. This abstraction reduces the need for ad-hoc scripts or glue code.</p>"},{"location":"platforms/terraform/#cloud-and-on-prem-readiness","title":"Cloud and On-Prem Readiness","text":"<p>While CLAH is designed to run on self-hosted infrastructure, the use of Terraform ensures portability:</p> <ul> <li>Infrastructure can be easily extended to support hybrid setups (e.g., using AWS, GCP, or Azure providers).</li> <li>Terraform modules in CLAH can be reused or adapted for deployments in the cloud, without rewriting core logic.</li> </ul>"},{"location":"platforms/terraform/#real-world-example-in-clah","title":"Real-World Example in CLAH","text":"<p>In practice, CLAH provisions Docker containers with predictable IPs, configures Vault policies, registers services in Consul, and updates DNS records \u2014 all in a single Terraform run. This seamless integration is only possible because Terraform supports true multi-provider workflows natively.</p> <p>The ability to connect heterogeneous components declaratively makes Terraform the ideal choice for CLAH's complex and evolving infrastructure needs.</p>"},{"location":"platforms/terraform/#state-management","title":"State Management","text":"<p>Terraform maintains a state file that represents the current known state of the infrastructure. This file is crucial for enabling Terraform to determine what changes are necessary when applying a configuration \u2014 and for ensuring that deployments remain consistent, reliable, and reproducible.</p>"},{"location":"platforms/terraform/#why-state-matters-in-clah","title":"Why State Matters in CLAH","text":"<p>The CLAH platform is composed of interconnected services: containers, secrets, DNS records, proxy rules, and monitoring agents. Keeping an accurate and up-to-date representation of this infrastructure is critical to avoid drift and unintended side effects.</p> <p>Terraform\u2019s state management enables:</p> <ul> <li>Change Detection: Terraform compares the desired configuration with the current state and generates a precise execution plan.</li> <li>Dependency Tracking: Resources can be linked logically, so that dependent changes are ordered and applied safely.</li> <li>Partial Updates: Only the parts of the infrastructure that have changed are modified, reducing downtime and risk.</li> <li>Safe Rollouts: With versioned state storage (e.g., in Git or remote backends), it\u2019s possible to track changes and roll back if needed.</li> </ul>"},{"location":"platforms/terraform/#remote-state-and-collaboration","title":"Remote State and Collaboration","text":"<p>Terraform supports remote state backends (e.g., local files, S3, Consul, or encrypted Vault storage). In CLAH:</p> <ul> <li>State is stored locally for isolated, single-node setups.</li> <li>Optionally, remote backends can be used to support multi-user environments or automated pipelines.</li> </ul>"},{"location":"platforms/terraform/#security-of-state","title":"Security of State","text":"<p>Because the state may include sensitive data (like IPs, tokens, or internal paths), CLAH uses:</p> <ul> <li>Encrypted storage</li> <li>Versioned backups</li> <li>Restricted access policies</li> </ul> <p>Terraform\u2019s state model provides the backbone for repeatable and deterministic infrastructure deployments, which is a cornerstone of the CLAH project.</p>"},{"location":"platforms/terraform/#modularity-and-reusability","title":"Modularity and Reusability","text":"<p>Terraform promotes a modular architecture through its built-in support for modules \u2014 reusable blocks of configuration that encapsulate related resources and expose standardized inputs and outputs. This is a perfect fit for the CLAH project, which is designed around composable, containerized service units.</p>"},{"location":"platforms/terraform/#modular-design-in-clah","title":"Modular Design in CLAH","text":"<p>Each key subsystem in CLAH \u2014 such as logging, secrets management, monitoring, proxying, or a specific application \u2014 is defined as a Terraform module, with:</p> <ul> <li>A clear interface (<code>variables.tf</code>)</li> <li>Optional configuration defaults (<code>locals.tf</code>)</li> <li>Well-defined outputs (<code>outputs.tf</code>)</li> <li>Internal resources grouped logically</li> </ul> <p>This structure ensures:</p> <ul> <li>Separation of concerns: Each module manages one functional area.</li> <li>Ease of testing: Modules can be validated independently.</li> <li>Composability: Modules can be combined in different topologies.</li> <li>Scalability: New features can be introduced without breaking existing modules.</li> </ul>"},{"location":"platforms/terraform/#example-a-logging-module","title":"Example: A Logging Module","text":"<p>The logging stack in CLAH (e.g., Filebeat + Logstash + Elasticsearch) is managed as a module. It:</p> <ul> <li>Deploys containers on a specific network</li> <li>Exposes endpoints through reverse proxy rules</li> <li>Registers services in DNS and service discovery</li> <li>Outputs metadata for use in monitoring or dependent services</li> </ul> <p>This module can be reused across environments (development, test, production) with minor configuration changes, reducing duplication and maintenance overhead.</p>"},{"location":"platforms/terraform/#long-term-benefits","title":"Long-Term Benefits","text":"<p>A modular approach enables:</p> <ul> <li>Faster onboarding for new services</li> <li>More predictable upgrades and bug fixes</li> <li>Code reuse across projects or even organizations</li> </ul> <p>Terraform\u2019s native support for modularity makes it ideal for a system like CLAH, which is built to evolve.</p>"},{"location":"platforms/terraform/#security-and-secrets-handling","title":"Security and Secrets Handling","text":"<p>Security is a fundamental concern for CLAH, especially given the sensitive nature of credentials, tokens, and configuration data managed within the platform. Terraform\u2019s integration with secret management tools and its careful handling of sensitive data are key reasons for its selection.</p>"},{"location":"platforms/terraform/#vault-integration","title":"Vault Integration","text":"<p>CLAH leverages HashiCorp Vault for dynamic secrets, PKI automation, and secure storage of sensitive information. Terraform provides a first-class Vault provider that allows:</p> <ul> <li>Reading secrets dynamically during provisioning</li> <li>Automating the generation and renewal of credentials</li> <li>Applying fine-grained access policies</li> <li>Avoiding hardcoding secrets in configuration files</li> </ul> <p>This integration ensures that secrets are never exposed in plaintext and are managed according to security best practices.</p>"},{"location":"platforms/terraform/#sensitive-data-handling-in-terraform","title":"Sensitive Data Handling in Terraform","text":"<p>Terraform itself supports marking variables and outputs as sensitive, which:</p> <ul> <li>Prevents secrets from being displayed in CLI output or logs</li> <li>Restricts accidental exposure during plan or apply phases</li> <li>Encourages secure handling throughout the deployment pipeline</li> </ul>"},{"location":"platforms/terraform/#secure-state-storage","title":"Secure State Storage","text":"<p>Since Terraform\u2019s state files may include sensitive information, CLAH applies:</p> <ul> <li>Encrypted remote state backends when collaborating</li> <li>Strict access controls on local and remote state storage</li> <li>State file versioning and backups to audit changes</li> </ul>"},{"location":"platforms/terraform/#benefits-for-clah-security-posture","title":"Benefits for CLAH Security Posture","text":"<p>Using Terraform alongside Vault strengthens CLAH\u2019s overall security by:</p> <ul> <li>Enabling dynamic, short-lived credentials</li> <li>Automating secure key rotation</li> <li>Minimizing the risk of leaked secrets</li> <li>Improving auditability of secret usage and access</li> </ul> <p>Terraform\u2019s mature security model aligns well with CLAH\u2019s goal of building a secure, automated, and maintainable infrastructure stack.</p>"},{"location":"platforms/terraform/#limitations-and-mitigations","title":"Limitations and Mitigations","text":"<p>While Terraform is a powerful tool for Infrastructure as Application Code, it has some limitations that are important to acknowledge in the context of CLAH. Understanding these challenges helps in planning appropriate mitigations.</p>"},{"location":"platforms/terraform/#limitations","title":"Limitations","text":"<ul> <li>State Management Complexity: Managing state files can become challenging as the infrastructure grows, especially in multi-user or multi-environment scenarios.</li> <li>Imperative Logic Limitations: Terraform is primarily declarative and lacks full support for complex imperative workflows or conditional logic without external scripting.</li> <li>Provider Ecosystem Gaps: Although extensive, some providers or resource types may have incomplete support or delayed updates.</li> <li>Learning Curve: Terraform\u2019s domain-specific language (HCL) and concepts like modules, providers, and state require initial investment to master.</li> </ul>"},{"location":"platforms/terraform/#mitigations-in-clah","title":"Mitigations in CLAH","text":"<ul> <li>Remote State Backends: Use of remote, encrypted backends (e.g., Consul, Vault, or cloud storage) to centralize state and support collaboration.</li> <li>Complementary Tools: Employ external scripting, CI/CD pipelines, or configuration management tools (e.g., Ansible) for complex workflows alongside Terraform.</li> <li>Community and Custom Providers: Extend functionality by creating or leveraging custom providers and modules when official ones lack features.</li> <li>Documentation and Training: Invest in thorough documentation and developer onboarding to lower the barrier to entry.</li> </ul>"},{"location":"platforms/terraform/#conclusion","title":"Conclusion","text":"<p>By proactively addressing these limitations, CLAH leverages Terraform\u2019s strengths while minimizing potential risks, resulting in a resilient, scalable, and maintainable infrastructure automation foundation.</p>"},{"location":"services/","title":"Section for all services documentation","text":""},{"location":"services/service-config/infra-path-sc/","title":"Service Config values","text":""},{"location":"services/service-config/put-get-sc/","title":"How to write and read Service Config","text":""},{"location":"services/vault/create-kv/","title":"Works with Vault","text":""},{"location":"services/vault/how-use-sops/","title":"Use SOPS for secret management","text":""}]}